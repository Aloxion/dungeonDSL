/*
 * generated by Xtext 2.37.0
 */
package org.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.ide.contentassist.antlr.internal.InternalDungeonDSLParser;
import org.services.DungeonDSLGrammarAccess;

public class DungeonDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DungeonDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DungeonDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSizesAccess().getAlternatives(), "rule__Sizes__Alternatives");
			builder.put(grammarAccess.getRoomTypesAccess().getAlternatives(), "rule__RoomTypes__Alternatives");
			builder.put(grammarAccess.getDungeonAccess().getGroup(), "rule__Dungeon__Group__0");
			builder.put(grammarAccess.getFloorAccess().getGroup(), "rule__Floor__Group__0");
			builder.put(grammarAccess.getRoomAccess().getGroup(), "rule__Room__Group__0");
			builder.put(grammarAccess.getDungeonAccess().getNameAssignment_1(), "rule__Dungeon__NameAssignment_1");
			builder.put(grammarAccess.getDungeonAccess().getThemeAssignment_5(), "rule__Dungeon__ThemeAssignment_5");
			builder.put(grammarAccess.getDungeonAccess().getLvlAssignment_8(), "rule__Dungeon__LvlAssignment_8");
			builder.put(grammarAccess.getDungeonAccess().getFloorsAssignment_9(), "rule__Dungeon__FloorsAssignment_9");
			builder.put(grammarAccess.getFloorAccess().getNameAssignment_1(), "rule__Floor__NameAssignment_1");
			builder.put(grammarAccess.getFloorAccess().getRoomsAssignment_3(), "rule__Floor__RoomsAssignment_3");
			builder.put(grammarAccess.getRoomAccess().getNameAssignment_1(), "rule__Room__NameAssignment_1");
			builder.put(grammarAccess.getRoomAccess().getSizeAssignment_5(), "rule__Room__SizeAssignment_5");
			builder.put(grammarAccess.getRoomAccess().getTypeAssignment_8(), "rule__Room__TypeAssignment_8");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DungeonDSLGrammarAccess grammarAccess;

	@Override
	protected InternalDungeonDSLParser createParser() {
		InternalDungeonDSLParser result = new InternalDungeonDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DungeonDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DungeonDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
