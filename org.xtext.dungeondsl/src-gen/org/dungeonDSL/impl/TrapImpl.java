/**
 * generated by Xtext 2.37.0
 */
package org.dungeonDSL.impl;

import org.dungeonDSL.BOOLEAN;
import org.dungeonDSL.DungeonDSLPackage;
import org.dungeonDSL.EventTrigger;
import org.dungeonDSL.Trap;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Trap</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.dungeonDSL.impl.TrapImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.dungeonDSL.impl.TrapImpl#getTrigger <em>Trigger</em>}</li>
 *   <li>{@link org.dungeonDSL.impl.TrapImpl#getDisarmable <em>Disarmable</em>}</li>
 *   <li>{@link org.dungeonDSL.impl.TrapImpl#getTriggerChance <em>Trigger Chance</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TrapImpl extends MinimalEObjectImpl.Container implements Trap
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getTrigger() <em>Trigger</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected static final EventTrigger TRIGGER_EDEFAULT = EventTrigger.STEP_ON;

  /**
   * The cached value of the '{@link #getTrigger() <em>Trigger</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected EventTrigger trigger = TRIGGER_EDEFAULT;

  /**
   * The default value of the '{@link #getDisarmable() <em>Disarmable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisarmable()
   * @generated
   * @ordered
   */
  protected static final BOOLEAN DISARMABLE_EDEFAULT = BOOLEAN.TRUE;

  /**
   * The cached value of the '{@link #getDisarmable() <em>Disarmable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisarmable()
   * @generated
   * @ordered
   */
  protected BOOLEAN disarmable = DISARMABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getTriggerChance() <em>Trigger Chance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTriggerChance()
   * @generated
   * @ordered
   */
  protected static final int TRIGGER_CHANCE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTriggerChance() <em>Trigger Chance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTriggerChance()
   * @generated
   * @ordered
   */
  protected int triggerChance = TRIGGER_CHANCE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TrapImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DungeonDSLPackage.Literals.TRAP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DungeonDSLPackage.TRAP__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventTrigger getTrigger()
  {
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrigger(EventTrigger newTrigger)
  {
    EventTrigger oldTrigger = trigger;
    trigger = newTrigger == null ? TRIGGER_EDEFAULT : newTrigger;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DungeonDSLPackage.TRAP__TRIGGER, oldTrigger, trigger));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BOOLEAN getDisarmable()
  {
    return disarmable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisarmable(BOOLEAN newDisarmable)
  {
    BOOLEAN oldDisarmable = disarmable;
    disarmable = newDisarmable == null ? DISARMABLE_EDEFAULT : newDisarmable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DungeonDSLPackage.TRAP__DISARMABLE, oldDisarmable, disarmable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getTriggerChance()
  {
    return triggerChance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTriggerChance(int newTriggerChance)
  {
    int oldTriggerChance = triggerChance;
    triggerChance = newTriggerChance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DungeonDSLPackage.TRAP__TRIGGER_CHANCE, oldTriggerChance, triggerChance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.TRAP__NAME:
        return getName();
      case DungeonDSLPackage.TRAP__TRIGGER:
        return getTrigger();
      case DungeonDSLPackage.TRAP__DISARMABLE:
        return getDisarmable();
      case DungeonDSLPackage.TRAP__TRIGGER_CHANCE:
        return getTriggerChance();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.TRAP__NAME:
        setName((String)newValue);
        return;
      case DungeonDSLPackage.TRAP__TRIGGER:
        setTrigger((EventTrigger)newValue);
        return;
      case DungeonDSLPackage.TRAP__DISARMABLE:
        setDisarmable((BOOLEAN)newValue);
        return;
      case DungeonDSLPackage.TRAP__TRIGGER_CHANCE:
        setTriggerChance((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.TRAP__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DungeonDSLPackage.TRAP__TRIGGER:
        setTrigger(TRIGGER_EDEFAULT);
        return;
      case DungeonDSLPackage.TRAP__DISARMABLE:
        setDisarmable(DISARMABLE_EDEFAULT);
        return;
      case DungeonDSLPackage.TRAP__TRIGGER_CHANCE:
        setTriggerChance(TRIGGER_CHANCE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.TRAP__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DungeonDSLPackage.TRAP__TRIGGER:
        return trigger != TRIGGER_EDEFAULT;
      case DungeonDSLPackage.TRAP__DISARMABLE:
        return disarmable != DISARMABLE_EDEFAULT;
      case DungeonDSLPackage.TRAP__TRIGGER_CHANCE:
        return triggerChance != TRIGGER_CHANCE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", trigger: ");
    result.append(trigger);
    result.append(", disarmable: ");
    result.append(disarmable);
    result.append(", triggerChance: ");
    result.append(triggerChance);
    result.append(')');
    return result.toString();
  }

} //TrapImpl
