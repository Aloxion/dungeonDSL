/*
 * generated by Xtext 2.37.0
 */
package org.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.dungeonDSL.Dungeon;
import org.dungeonDSL.DungeonDSLPackage;
import org.dungeonDSL.Floor;
import org.dungeonDSL.Room;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.services.DungeonDSLGrammarAccess;

@SuppressWarnings("all")
public class DungeonDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DungeonDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DungeonDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DungeonDSLPackage.DUNGEON:
				sequence_Dungeon(context, (Dungeon) semanticObject); 
				return; 
			case DungeonDSLPackage.FLOOR:
				sequence_Floor(context, (Floor) semanticObject); 
				return; 
			case DungeonDSLPackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Dungeon returns Dungeon
	 *
	 * Constraint:
	 *     (name=ID theme=STRING lvl=INT floors+=Floor*)
	 * </pre>
	 */
	protected void sequence_Dungeon(ISerializationContext context, Dungeon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Floor returns Floor
	 *
	 * Constraint:
	 *     (name=ID rooms+=Room*)
	 * </pre>
	 */
	protected void sequence_Floor(ISerializationContext context, Floor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (name=ID size=Sizes type=RoomTypes)
	 * </pre>
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DungeonDSLPackage.Literals.ROOM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DungeonDSLPackage.Literals.ROOM__NAME));
			if (transientValues.isValueTransient(semanticObject, DungeonDSLPackage.Literals.ROOM__SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DungeonDSLPackage.Literals.ROOM__SIZE));
			if (transientValues.isValueTransient(semanticObject, DungeonDSLPackage.Literals.ROOM__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DungeonDSLPackage.Literals.ROOM__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoomAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRoomAccess().getSizeSizesEnumRuleCall_5_0(), semanticObject.getSize());
		feeder.accept(grammarAccess.getRoomAccess().getTypeRoomTypesEnumRuleCall_8_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
