/**
 * generated by Xtext 2.37.0
 */
package org.dungeonDSL.impl;

import java.util.Collection;

import org.dungeonDSL.Dungeon;
import org.dungeonDSL.DungeonDSLPackage;
import org.dungeonDSL.Floor;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dungeon</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.dungeonDSL.impl.DungeonImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.dungeonDSL.impl.DungeonImpl#getTheme <em>Theme</em>}</li>
 *   <li>{@link org.dungeonDSL.impl.DungeonImpl#getLvl <em>Lvl</em>}</li>
 *   <li>{@link org.dungeonDSL.impl.DungeonImpl#getFloors <em>Floors</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DungeonImpl extends MinimalEObjectImpl.Container implements Dungeon
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getTheme() <em>Theme</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTheme()
   * @generated
   * @ordered
   */
  protected static final String THEME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTheme() <em>Theme</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTheme()
   * @generated
   * @ordered
   */
  protected String theme = THEME_EDEFAULT;

  /**
   * The default value of the '{@link #getLvl() <em>Lvl</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLvl()
   * @generated
   * @ordered
   */
  protected static final int LVL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getLvl() <em>Lvl</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLvl()
   * @generated
   * @ordered
   */
  protected int lvl = LVL_EDEFAULT;

  /**
   * The cached value of the '{@link #getFloors() <em>Floors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFloors()
   * @generated
   * @ordered
   */
  protected EList<Floor> floors;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DungeonImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DungeonDSLPackage.Literals.DUNGEON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DungeonDSLPackage.DUNGEON__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTheme()
  {
    return theme;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTheme(String newTheme)
  {
    String oldTheme = theme;
    theme = newTheme;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DungeonDSLPackage.DUNGEON__THEME, oldTheme, theme));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getLvl()
  {
    return lvl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLvl(int newLvl)
  {
    int oldLvl = lvl;
    lvl = newLvl;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DungeonDSLPackage.DUNGEON__LVL, oldLvl, lvl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Floor> getFloors()
  {
    if (floors == null)
    {
      floors = new EObjectContainmentEList<Floor>(Floor.class, this, DungeonDSLPackage.DUNGEON__FLOORS);
    }
    return floors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.DUNGEON__FLOORS:
        return ((InternalEList<?>)getFloors()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.DUNGEON__NAME:
        return getName();
      case DungeonDSLPackage.DUNGEON__THEME:
        return getTheme();
      case DungeonDSLPackage.DUNGEON__LVL:
        return getLvl();
      case DungeonDSLPackage.DUNGEON__FLOORS:
        return getFloors();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.DUNGEON__NAME:
        setName((String)newValue);
        return;
      case DungeonDSLPackage.DUNGEON__THEME:
        setTheme((String)newValue);
        return;
      case DungeonDSLPackage.DUNGEON__LVL:
        setLvl((Integer)newValue);
        return;
      case DungeonDSLPackage.DUNGEON__FLOORS:
        getFloors().clear();
        getFloors().addAll((Collection<? extends Floor>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.DUNGEON__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DungeonDSLPackage.DUNGEON__THEME:
        setTheme(THEME_EDEFAULT);
        return;
      case DungeonDSLPackage.DUNGEON__LVL:
        setLvl(LVL_EDEFAULT);
        return;
      case DungeonDSLPackage.DUNGEON__FLOORS:
        getFloors().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DungeonDSLPackage.DUNGEON__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DungeonDSLPackage.DUNGEON__THEME:
        return THEME_EDEFAULT == null ? theme != null : !THEME_EDEFAULT.equals(theme);
      case DungeonDSLPackage.DUNGEON__LVL:
        return lvl != LVL_EDEFAULT;
      case DungeonDSLPackage.DUNGEON__FLOORS:
        return floors != null && !floors.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", theme: ");
    result.append(theme);
    result.append(", lvl: ");
    result.append(lvl);
    result.append(')');
    return result.toString();
  }

} //DungeonImpl
